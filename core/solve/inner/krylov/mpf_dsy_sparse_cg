  //#include "mpf.h"
  //
  ///* Uses only csr format (instead of CSC) and applies opeartions form the left.*/
  ///* A does not have to be transposed because it is symmetrix, in hermitian     */
  ///* version only should be conjugated.                                         */
  //void mpf_dsy_sparse_cg
  //(
  //  /* solver parameters */
  //  const KrylovMeta meta,
  //  const MPInt n,
  //
  //  /* input matrix A */
  //  const MPSparseDescr A_descr,
  //  const MPSparseHandle A_h,
  //
  //  /* input matrix B */
  //  const MPSparseCsr *B,
  //
  //  /* output matrix X */
  //  MPSparseCsr *X,
  //
  //  /* memory for temporary variables */
  //  double *memory,
  //
  //  /* collected metadata */
  //  MPSolverInfo *info
  //)
  //{
  //  /* solver context */
  //  double norm_b = 0.0;
  //  double r_norm = 0.0;
  //  double alpha = 0.0;
  //  double beta  = 0.0;
  //
  //  MPInt i = 0;
  //  //MPInt m_B = n;
  //
  //  //double *tempf_vector = NULL;
  //  MPLayout layout = MP_COL_MAJOR;
  //  MPLayoutSparse sparse_layout;
  //
  //  /* temporary memory cpu */
  //  MPSparseCsr r_new;
  //  MPSparseCsr r_old;
  //  MPSparseCsr d_vec;
  //  MPSparseCsr x_temp;
  //  //MPSparseCsr s_temp; /* scalar */
  //  //MPSparseCsr t;
  //
  //  MPSparseCsr *r_new_ptr = &r_new;
  //  MPSparseCsr *r_old_ptr = &r_old;
  //  MPSparseCsr *tempf_handle_ptr = NULL;
  //
  //  /* initialization */
  //
  //  /*------------------------------------*/
  //  /* requires testing for preallocation */
  //  /*------------------------------------*/
  //
  //  //r_new.cols_start = mpf_malloc(sizeof(MPInt)*1);
  //  //r_new.cols_end = mpf_malloc(sizeof(MPInt)*1);
  //  //r_new.rows = mpf_malloc(sizeof(MPInt)*1);
  //  //r_new.data = mpf_malloc(sizeof(double)*1);
  //  //r_new.cols = NULL;
  //  //r_new.data = NULL;
  //  //r_new.rows_start = NULL;
  //  //r_new.rows_end = NULL;
  //  //r_new.cols_start[0] = 0;
  //  //r_new.cols_end[0] = 0;
  //
  //  //r_old.rows_start = mpf_malloc(sizeof(MPInt)*1);
  //  //r_old.rows_end = mpf_malloc(sizeof(MPInt)*1);
  //  //r_old.cols = mpf_malloc(sizeof(MPInt)*1);
  //  //r_old.data = mpf_malloc(sizeof(double)*1);
  //  //r_old.rows_start[0] = 0;
  //  //r_old.rows_end[0] = 0;
  //
  //  //d_vec.rows_start = mpf_malloc(sizeof(MPInt)*1); 
  //  //d_vec.rows_end = mpf_malloc(sizeof(MPInt)*1);
  //  //d_vec.cols = mpf_malloc(sizeof(MPInt)*1);
  //  //d_vec.data = mpf_malloc(sizeof(double)*1);
  //  //d_vec.rows_start[0] = 0;
  //  //d_vec.rows_end[0] = 0;
  //
  //  //x_temp.rows_start = mpf_malloc(sizeof(MPInt)*1);
  //  //x_temp.rows_end = mpf_malloc(sizeof(MPInt)*1);
  //  //x_temp.cols = mpf_malloc(sizeof(MPInt)*1);
  //  //x_temp.data = mpf_malloc(sizeof(double)*1);
  //  //x_temp.rows_start[0] = 0;
  //  //x_temp.rows_end[0] = 0;
  //
  //  //s_temp.rows_start = mpf_malloc(sizeof(MPInt)*1);
  //  //s_temp.rows_end = mpf_malloc(sizeof(MPInt)*1);
  //  //s_temp.cols = mpf_malloc(sizeof(MPInt)*1);
  //  //s_temp.data = mpf_malloc(sizeof(double)*1);
  //  //s_temp.rows_start[0] = 0;
  //  //s_temp.rows_end[0] = 0;
  //  d_vec.descr.type = SPARSE_MATRIX_TYPE_GENERAL;
  //  r_new.descr.type = SPARSE_MATRIX_TYPE_GENERAL;
  //  r_old.descr.type = SPARSE_MATRIX_TYPE_GENERAL;
  //  x_temp.descr.type = SPARSE_MATRIX_TYPE_GENERAL;
  //  //s_temp.descr.type = SPARSE_MATRIX_TYPE_GENERAL;
  //  /* creates sparse matrices */
  //  //mkl_sparse_d_create_csc(&r_old.handle, INDEXING, n, 1, r_old.cols_start,
  //  //  r_old.cols_end, r_old.rows, r_old.data);
  //  //mkl_sparse_d_create_csc(&r_new.handle, INDEXING, n, 1, r_new.cols_start,
  //  //  r_new.cols_end, r_new.rows, r_new.data);
  //  //mkl_sparse_d_create_csr(&d_vec.handle, INDEXING, n, 1, d_vec.rows_start,
  //  //  d_vec.rows_end, d_vec.cols, d_vec.data);
  //  //mkl_sparse_d_create_csc(&x_temp.handle, INDEXING, n, 1, x_temp.cols_start,
  //  //  x_temp.cols_end, x_temp.rows, x_temp.data);
  //  //mkl_sparse_d_create_csc(&s_temp.handle, INDEXING, n, 1, s_temp.cols_start,
  //  //  s_temp.cols_end, s_temp.rows, s_temp.data);
  //
  //  MPInt status; // testing mkl_sparse functions
  //  MPInt nr, nc;
  //  sparse_index_base_t index;
  //
  //  /* first iteration */
  //  mpf_convert_layout_to_sparse(layout, &sparse_layout);
  //  norm_b = cblas_dnrm2(B->rows_end[0]-B->rows_start[0], B->data, 1);
  //  //printf("norm_b: %1.4E\n", norm_b);
  //
  //  /* copies B <- r_new */
  //  status = mkl_sparse_copy(B->handle, r_new.descr, &r_new.handle);
  //  status = mkl_sparse_d_export_csr(r_new.handle, &index, &nr, &nc, &r_new.rows_start,
  //    &r_new.rows_end, &r_new.cols, (double**)&r_new.data);
  //
  //  /* computes xtemp <- x*A */
  //  status = mkl_sparse_spmm(SPARSE_OPERATION_NON_TRANSPOSE, X->handle, A_h,  /* performs A*X */
  //    &x_temp.handle);
  //  //printf("status (0): %d\n", status);
  //  status = mkl_sparse_d_export_csr(x_temp.handle, &index, &nr, &nc, &x_temp.rows_start,
  //    &x_temp.rows_end, &x_temp.cols, (double**)&x_temp.data);
  //  //printf("status (1): %d\n", status);
  //  //printf("x_temp.rows_start[0]: %d, x_temp.rows_end[0]: %d\n", x_temp.rows_start[0], x_temp.rows_end[0]);
  //
  //  /* Rold <- Rnew - xtemp */
  //  //printf("r_old.rows_end[0]: %d, r_old.rows_start[0]: %d\n", r_old.rows_end[0], r_old.rows_start[0]);
  //  if (x_temp.rows_end[0] == x_temp.rows_start[0])
  //  {
  //    status = mkl_sparse_copy(r_new.handle, r_old.descr, &r_old.handle);
  //  }
  //  else
  //  {
  //    status = mkl_sparse_d_add(SPARSE_OPERATION_NON_TRANSPOSE, x_temp.handle, -1.0,
  //      r_new.handle, &r_old.handle);
  //  }
  //  status = mkl_sparse_d_export_csr(r_old.handle, &index, &nr, &nc, &r_old.rows_start,
  //    &r_old.rows_end, &r_old.cols, (double**)&r_old.data);
  //  //printf("r_old.rows_end[0]: %d, r_old.rows_start[0]: %d\n", r_old.rows_end[0], r_old.rows_start[0]);
  //  //printf("r_new.rows_end[0]: %d, r_new.rows_start[0]: %d\n", r_new.rows_end[0], r_new.rows_start[0]);
  //
  //  /* computes r_norm */
  //  r_norm = mpf_dnrm2(r_old.rows_end[0]-r_old.rows_start[0], r_old.data, 1);
  //
  //  /* d_vec <- r_old */
  //  status = mkl_sparse_copy(r_old.handle, r_old.descr, &d_vec.handle);
  //  status = mkl_sparse_d_export_csr(d_vec.handle, &index, &nr, &nc, &d_vec.rows_start,
  //    &d_vec.rows_end, &d_vec.cols, (double**)&d_vec.data);
  //  //printf("status (1): %d\n", status);
  //  //printf("SPARSE_STATUS_NOT_INITIALIZED: %d\n", SPARSE_STATUS_NOT_INITIALIZED);
  //
  //  //#if STATUS == MP_DEBUG
  //  //  printf("relative residual: %1.4E\n", r_norm / norm_b);
  //  //#endif
  //  //printf("r_norm: %1.4E, b_norm: %1.4E\n", r_norm, norm_b);
  //
  //  /* main loop (iterations) */
  //  while
  //  (
  //  //(i < meta.iterations) &&
  //  (i < 40) &&
  //  //(i < 1) &&
  //  (r_norm/norm_b > meta.tolerance)
  //  )
  //  {
  //    printf("-- i: %d\n", i);
  //
  //    /* coomputes r_new */
  //    //printf("before\n");
  //    //printf("((double*)d_vec.data)[0]: %1.4E\n", ((double*)d_vec.data)[0]);
  //    //printf("r_new_ptr->rows_start[0]: %d, r_new_ptr->rows_end[0]: %d\n", r_new_ptr->rows_start[0], r_new_ptr->rows_end[0]);
  //    //printf("((double*)r_new_ptr->data)[0]: %1.4E\n", ((double*)r_new_ptr->data)[0]);
  //    //printf("d_vec->rows_start[0]: %d, d_vec->rows_end[0]: %d\n", d_vec.rows_start[0], d_vec.rows_end[0]);
  //    //printf("d_vec->cols[0]: %d, %d, %d\n", d_vec.cols[0], d_vec.cols[1], d_vec.cols[2]);
  //    //printf("((double*)d_vec->data)[0]: %1.4E, %1.4E, %1.4E\n", ((double*)d_vec.data)[0], ((double*)d_vec.data)[1], ((double*)d_vec.data)[2]);
  //    //status = mkl_sparse_order(d_vec.handle);
  //    //status = mkl_sparse_d_export_csr(d_vec.handle, &index, &nr, &nc, &d_vec.rows_start,
  //    //  &d_vec.rows_end, &d_vec.cols, (double**)&d_vec.data);
  //    status = mkl_sparse_spmm(SPARSE_OPERATION_NON_TRANSPOSE, d_vec.handle, A_h, //mpf_sparse_d_mv(SPARSE_OPERATION_NON_TRANSPOSE, 1.0, A_handle, A_descr, dvec,  0.0, r_new);
  //      &r_new_ptr->handle);
  //    status = mkl_sparse_order(r_new_ptr->handle);
  //    status = mkl_sparse_d_export_csr(r_new_ptr->handle, &index, &nr, &nc, &r_new_ptr->rows_start,
  //      &r_new_ptr->rows_end, &r_new_ptr->cols, (double**)&r_new_ptr->data);
  //
  //  //if (i > 0)
  //  //{
  //  //  MPSparseCsr dt;
  //  //  MPSparseCsr T;
  //  //  dt.rows_start = mpf_malloc(sizeof(MPInt)*1);
  //  //  dt.rows_end = mpf_malloc(sizeof(MPInt)*1);
  //  //  dt.cols = mpf_malloc(sizeof(MPInt)*3);
  //  //  dt.data = mpf_malloc(sizeof(double)*3);
  //
  //  //  dt.rows_start[0] = 0;
  //  //  dt.rows_end[0] = 3;
  //
  //  //  dt.cols[0] = 0;
  //  //  dt.cols[1] = 1;
  //  //  dt.cols[2] = 128;
  //
  //  //  ((double*)dt.data)[0] = 0.0;
  //  //  ((double*)dt.data)[1] = 0.0;
  //  //  ((double*)dt.data)[2] = 0.0;
  //
  //  //  //((double*)dt.data)[0] = 0.0;
  //  //  ((double*)dt.data)[0] = 1.1538E-2;
  //  //  //((double*)dt.data)[0] = 1.0;
  //  //  //((double*)dt.data)[1] = 0.0;
  //  //  ((double*)dt.data)[1] = 0.075954714828202;// 7.5955E-2;
  //  //  ((double*)dt.data)[2] = 0.075954714828202;
  //  //  //((double*)dt.data)[2] = 0.0;
  //
  //  //  //((double*)dt.data)[0] = 1.0;
  //  //  //((double*)dt.data)[1] = 0.0;
  //  //  //((double*)dt.data)[2] = 0.0;
  //
  //
  //  //  status = mkl_sparse_d_create_csr(&dt.handle, INDEXING, 1, n, dt.rows_start,
  //  //    dt.rows_end, dt.cols, dt.data);
  //  //  printf("    status create csr: %d\n", status);
  //
  //  //    printf("        ---> n: %d\n", n);
  //  //  //status = mkl_sparse_order(A_h);
  //  //  status = mkl_sparse_spmm(SPARSE_OPERATION_NON_TRANSPOSE, dt.handle, A_h, //mpf_sparse_d_mv(SPARSE_OPERATION_NON_TRANSPOSE, 1.0, A_handle, A_descr, dvec,  0.0, r_new);
  //  //    &T.handle);
  //  //  printf("    status spmm: %d\n", status);
  //
  //  //  status = mkl_sparse_order(T.handle);
  //  //  status = mkl_sparse_d_export_csr(T.handle, &index, &nr, &nc, &T.rows_start,
  //  //    &T.rows_end, &T.cols, (double**)&T.data);
  //
  //  //  printf("    T.rows_start[0]: %d, T.rows_end[0]: %d\n", T.rows_start[0], T.rows_end[0]);
  //  //  printf("    T.cols: %d, %d, %d, %d, %d, %d\n", T.cols[0], T.cols[1], T.cols[2], T.cols[3], T.cols[4], T.cols[5]);
  //  //  printf("    T.data: %1.4E, %1.4E, %1.4E, %1.4E, %1.4E, %1.4E\n", ((double*)T.data)[0], ((double*)T.data)[1], ((double*)T.data)[2], ((double*)T.data)[3], ((double*)T.data)[4], ((double*)T.data)[5]);
  //  //  //status = mkl_sparse_d_export_csr(d_vec.handle, &index, &nr, &nc, &d_vec.rows_start,
  //  //  //  &d_vec.rows_end, &d_vec.cols, (double**)&d_vec.data);
  //  //  //printf("d_vec.rows_end[0]: %d, d_vec.rows_start[0]: %d\n", d_vec.rows_end[0], d_vec.rows_start[0]);
  //  //  //printf("d_vec.cols: %d, %d, %d\n", d_vec.cols[0], d_vec.cols[1], d_vec.cols[2]);
  //  //  //printf("d_vec.cols: %1.4E, %1.4E, %1.4E\n", ((double*)d_vec.data)[0], ((double*)d_vec.data)[1], ((double*)d_vec.data)[2]);
  //
  //  //  mkl_sparse_destroy(dt.handle);
  //  //  mpf_free(dt.rows_start);
  //  //  mpf_free(dt.rows_end);
  //  //  mpf_free(dt.cols);
  //  //  mpf_free(dt.data);
  //  //}
  //    //printf("\n");
  //    //printf("status (spmm): %d\n", status);
  //    //printf("status: %d (order)\n", status);
  //    //printf("after\n");
  //    //printf("r_new_ptr->rows_start[0]: %d, r_new_ptr->rows_end[0]: %d\n", r_new_ptr->rows_start[0], r_new_ptr->rows_end[0]);
  //    //printf("((double*)r_new_ptr->data)[0]: [%1.4E, %1.4E, %1.4E %1.4E, %1.4E, %1.4E ]\n", ((double*)r_new_ptr->data)[0], ((double*)r_new_ptr->data)[1], ((double*)r_new_ptr->data)[2], ((double*)r_new_ptr->data)[3], ((double*)r_new_ptr->data)[4], ((double*)r_new_ptr->data)[5]);
  //    //printf("r_new_ptr->cols: %d, %d, %d, %d, %d, %d\n", r_new_ptr->cols[0], r_new_ptr->cols[1], r_new_ptr->cols[2], r_new_ptr->cols[3], r_new_ptr->cols[4], r_new_ptr->cols[5]);
  //
  //    /* initialize alpha */
  //
  //    status = mkl_sparse_order(d_vec.handle);
  //    status = mkl_sparse_d_export_csr(d_vec.handle, &index, &nr, &nc, &d_vec.rows_start,
  //      &d_vec.rows_end, &d_vec.cols, (double**)&d_vec.data);
  //    status = mkl_sparse_order(r_new_ptr->handle);
  //    status = mkl_sparse_d_export_csr(r_new_ptr->handle, &index, &nr, &nc, &r_new_ptr->rows_start,
  //      &r_new_ptr->rows_end, &r_new_ptr->cols, (double**)&r_new_ptr->data);
  //
  //    double acc;
  //    //printf("d_vec.rows_start[0]: %d, d_vec.rows_end[0]: %d\n", d_vec.rows_start[0], d_vec.rows_end[0]);
  //    //printf("r_new_ptr->rows_start[0]: %d, r_new_ptr->rows_end[0]: %d\n", r_new_ptr->rows_start[0], r_new_ptr->rows_end[0]);
  //    acc = mpf_sparse_d_dot(d_vec.rows_end[0]-d_vec.rows_start[0], r_new_ptr->rows_end[0]-r_new_ptr->rows_start[0],
  //      d_vec.cols, d_vec.data, r_new_ptr->cols, r_new_ptr->data);
  //    //printf("acc: %1.4E\n", acc);
  //
  //    //printf("s_temp.rows_start[0]: %d, s_temp.rows_end[0]: %d\n", s_temp.rows_start[0], s_temp.rows_end[0]);
  //    //printf("s_temp.cols[0]: %d, %d, %d\n", s_temp.cols[0], s_temp.cols[1], s_temp.cols[2]);
  //    //printf("alpha: %1.4E\n", ((double*)s_temp.data)[0]);
  //
  //    //printf("dot: %1.4E\n", mpf_ddot(r_old_ptr->rows_end[0]-r_old_ptr->rows_start[0], r_old_ptr->data, 1,
  //    //  r_old_ptr->data, 1));
  //    //printf("acc: %1.4E\n", acc);
  //    alpha = mpf_ddot(r_old_ptr->rows_end[0]-r_old_ptr->rows_start[0], r_old_ptr->data, 1,
  //      r_old_ptr->data, 1);
  //    //printf("alpha: %1.4E, acc: %1.4E\n", alpha, acc);
  //    alpha = alpha/acc;
  //    //printf("alpha: %1.4E\n", alpha);
  //
  //    /* update X */
  //    //printf("((double*)X->data)[0]: %1.4E\n", ((double*)X->data)[0]);
  //    status = mkl_sparse_copy(X->handle, X->descr, &x_temp.handle);
  //    status = mkl_sparse_d_export_csr(x_temp.handle, &index, &nr, &nc, &x_temp.rows_start,
  //      &x_temp.rows_end, &x_temp.cols, (double**)&x_temp.data);
  //    //printf("x_temp.rows_end[0]: %d, x_temp.rows_start[0]: %d\n", x_temp.rows_end[0], x_temp.rows_start[0]);
  //
  //    if (x_temp.rows_end[0] != x_temp.rows_start[0])
  //    {
  //      status = mkl_sparse_d_add(SPARSE_OPERATION_NON_TRANSPOSE, d_vec.handle, alpha,
  //        x_temp.handle, &X->handle); //mpf_daxpy(m_B, alpha, dvec, 1, x, 1);
  //      status = mkl_sparse_d_export_csr(X->handle, &index, &nr, &nc, &X->rows_start,
  //        &X->rows_end, &X->cols, (double**)&X->data);
  //    }
  //    else if (x_temp.rows_end[0] == x_temp.rows_start[0])
  //    {
  //      status = mkl_sparse_copy(d_vec.handle, d_vec.descr, &X->handle);
  //      status = mkl_sparse_d_export_csr(X->handle, &index, &nr, &nc, &X->rows_start,
  //        &X->rows_end, &X->cols, (double**)&X->data);
  //      //printf("X->rows_end[0]: %d, X->row_start[0]: %d\n", X->rows_start[0], X->rows_end[0]);
  //      mpf_dscal(X->rows_end[0]-X->rows_start[0], alpha, X->data, 1);
  //    }
  //    //printf("((double*)d_vec.data)[0]: %1.4E\n", ((double*)d_vec.data)[0]);
  //    //printf("((double*)X->data)[0]: %1.4E\n", ((double*)X->data)[0]);
  //
  //    /* updates r_new */
  //    status = mkl_sparse_copy(r_new_ptr->handle, x_temp.descr, &x_temp.handle);
  //    status = mkl_sparse_d_export_csr(x_temp.handle, &index, &nr, &nc, &x_temp.rows_start,
  //      &x_temp.rows_end, &x_temp.cols, (double**)&x_temp.data);
  //    status = mkl_sparse_d_add(SPARSE_OPERATION_NON_TRANSPOSE, x_temp.handle, -alpha,
  //        r_old_ptr->handle, &r_new_ptr->handle); /* define x_h_new */ //mpf_daxpy(m_B, 1.0, r_old, 1, r_new, 1);
  //    status = mkl_sparse_d_export_csr(r_new_ptr->handle, &index, &nr, &nc, &r_new_ptr->rows_start,
  //      &r_new_ptr->rows_end, &r_new_ptr->cols, (double**)&r_new_ptr->data);
  //
  //    /* updates beta */
  //    beta = mpf_ddot(r_new_ptr->rows_end[0]-r_new_ptr->rows_start[0], r_new_ptr->data, 1,
  //      r_new_ptr->data, 1);
  //    //printf("beta: %1.4E\n", beta);
  //    beta = beta/mpf_ddot(r_old_ptr->rows_end[0]-r_old_ptr->rows_start[0], r_old_ptr->data, 1,
  //      r_old_ptr->data, 1);
  //    //printf("beta: %1.4E\n", beta);
  //
  //    /* computes d_vec */
  //    status = mkl_sparse_copy(d_vec.handle, d_vec.descr, &x_temp.handle);
  //    status = mkl_sparse_d_export_csr(x_temp.handle, &index, &nr, &nc, &x_temp.rows_start,
  //      &x_temp.rows_end, &x_temp.cols, (double**)&x_temp.data);
  //    //printf("((double*)x_temp.data)[0]: %1.4E\n", ((double*)x_temp.data)[0]);
  //    status = mkl_sparse_d_add(SPARSE_OPERATION_NON_TRANSPOSE, x_temp.handle, beta,
  //        r_new_ptr->handle, &d_vec.handle); /* define x_h_new */ //mpf_daxpy(m_B, 1.0, r_old, 1, r_new, 1);
  //    status = mkl_sparse_d_export_csr(d_vec.handle, &index, &nr, &nc, &d_vec.rows_start,
  //      &d_vec.rows_end, &d_vec.cols, (double**)&d_vec.data);
  //    //printf("((double*)d_vec.data)[0]: %1.4E\n", ((double*)d_vec.data)[0]);
  //    //printf("d_vec.rows_start[0]: %d, d_vec.rows_end[0]: %d\n", d_vec.rows_start[0], d_vec.rows_end[0]);
  //    //printf("d_vec.cols[0]: %d, %d, %d\n", d_vec.cols[0], d_vec.cols[1], d_vec.cols[2]);
  //    //printf("d_vec.data[]: %1.4E, %1.4E, %1.4E\n", ((double*)d_vec.data)[0], ((double*)d_vec.data)[1], ((double*)d_vec.data)[2]);
  //    //printf("d_vec.rows_end[0]: %d, d_vec.rows_start[0]: %d\n", d_vec.rows_end[0], d_vec.rows_start[0]);
  //
  //    /* computes residual */
  //    r_norm = mpf_dnrm2(r_new_ptr->rows_end[0]-r_new_ptr->rows_start[0], r_new_ptr->data, 1);
  //    //printf("r_norm: %1.4E, norm_B: %1.4E\n", r_norm, norm_b);
  //
  //    /* swap */
  //    // printf("nz: %d, r_norm: %1.4E\n", r_new.cols_end[0]-r_new.cols_start[0], r_norm);
  //    tempf_handle_ptr = r_old_ptr;
  //    r_old_ptr = r_new_ptr;
  //    r_new_ptr = tempf_handle_ptr;
  //    i = i + 1;
  //    //printf("\n");
  //    //printf("s_temp.rows_start[0]: %d, s_temp.rows_end[0]: %d\n", s_temp.rows_start[0], s_temp.rows_end[0]);
  //    //printf("\n\n\n");
  //    //printf("X[0]: %1.8E\n", ((double*)X->data)[0]);
  //  }
  //
  //  mkl_sparse_destroy(r_old.handle);
  //  mkl_sparse_destroy(r_new.handle);
  //  //mkl_sparse_destroy(d_vec.handle);
  //  mkl_sparse_destroy(x_temp.handle);
  //  //mkl_sparse_destroy(s_temp.handle);
  ////  //tempf_vector = NULL;
  ////
  ////  mpf_free(r_new.cols_start);
  ////  mpf_free(r_new.cols_end);
  ////  mpf_free(r_new.rows);
  ////  mpf_free(r_new.data);
  ////
  ////  mpf_free(r_old.cols_start);
  ////  mpf_free(r_old.cols_end);
  ////  mpf_free(r_old.rows);
  ////  mpf_free(r_old.data);
  ////
  ////  mpf_free(d_vec.cols_start);
  ////  mpf_free(d_vec.cols_end);
  ////  mpf_free(d_vec.rows);
  ////  mpf_free(d_vec.data);
  ////
  ////  mpf_free(x_temp.cols_start);
  ////  mpf_free(x_temp.cols_end);
  ////  mpf_free(x_temp.rows);
  ////  mpf_free(x_temp.data);
  //}
